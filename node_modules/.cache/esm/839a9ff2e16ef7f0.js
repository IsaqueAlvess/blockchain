let Bloco,Transacao;_e16‍.x([["default",()=>Blockchain]]);_e16‍.w("./bloco",[["default",["Bloco"],function(v){Bloco=v}]]);_e16‍.w("./transacao",[["default",["Transacao"],function(v){Transacao=v}]]);


               class Blockchain{

    constructor(){
        this.chain = [];
        this.chain.push(this.criarBlocoGenesis());  //coloca na última posição
        this.transacoesPendentes = [];
        this.dificuldade = 4;    //proof of work
        this.recompensaMinerador = 0.5;
    }    

    criarBlocoGenesis(){
        return new Bloco('21/04/2021', 'Bloco Genesis','0');
    }

    adicionarTransacao(transacao){
        this.transacoesPendentes.push(transacao);
    }    

    getChain(){
        return this.chain;
    } 

    getHashUltimoBloco(){
        return this.chain[this.chain.length - 1].hash;
    }

    minerarTransacoesPendentes(enderecoMinerador){
        console.log("Iniciando mineração...");
        const novoBloco = new Bloco(Date.now, this.transacoesPendentes, this.getHashUltimoBloco());
        novoBloco.minerarBloco(this.dificuldade);
        console.log('Bloco minerado com sucesso!');
        this.chain.push(novoBloco); //coloca o bloco no blockchain
        
        this.transacoesPendentes =  [new Transacao(null,enderecoMinerador,this.recompensaMinerador)];
    }

    obterRecompensaDoMinerador(enderecoMinerador){
        let valorRecompensa = 0;

        for (const bloco of this.chain) {
            for (const transacao of bloco.transacoes) { 
                if(transacao.enderecoRemetente === enderecoMinerador){
                    valorRecompensa -= transacao.valor;
                }

                if(transacao.enderecoDestinatario === enderecoMinerador){
                    valorRecompensa += transacao.valor;
                }
                    
            }
        }
        return valorRecompensa;
    }


    
}